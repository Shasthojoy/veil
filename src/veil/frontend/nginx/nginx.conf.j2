user {{ config.owner }} {{ config.owner_group }};
worker_processes {{ config.get('worker_process_count', 'auto') }};
{% if 'worker_priority' in config %}
worker_priority {{ config.worker_priority }};
{% endif %}
{% if 'worker_rlimit_nofile' in config %}
# Maximum open file descriptors per process; should be > worker_connections.
worker_rlimit_nofile {{ config.worker_rlimit_nofile }};
{% endif %}

# uncomment this if you are not running nginx under supervisord
daemon off;

{% if 'pid_file' in config %}
pid {{ config.pid_file }};
{% endif %}

events {
    worker_connections {{ config.get('worker_connections', 100) }};
    multi_accept on;
    use epoll;
}

http {
    {% if config.get('server_names_hash_bucket_size') %}server_names_hash_bucket_size {{ config.server_names_hash_bucket_size }};{% endif %}
    server_tokens off;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 30;
    client_header_timeout 20;
    client_body_timeout 20;
    send_timeout 20;
    reset_timedout_connection on;

    client_body_buffer_size 128k;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets on;

    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    {# check for ssl_ciphers recommendations and use Intermediate compatibility: https://wiki.mozilla.org/Security/Server_Side_TLS #}
    ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/dhparam.pub.pem;

    resolver {{ config.DEFAULT_DNS_SERVERS |join(' ') }} valid=300s ipv6=off;
    resolver_timeout 10s;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header X-Content-Type-Options nosniff;

    {% if config.enable_compression %}
        gzip on;
        # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
        gzip_http_version 1.0;
        gzip_static off;
        gzip_proxied any;
        gzip_min_length 256;
        gzip_comp_level 5;
        gzip_types text/plain text/css text/javascript application/javascript application/x-javascript application/json text/x-json text/xml application/xml application/xml+rss application/atom+xml image/x-icon image/bmp image/x-ms-bmp;
        gzip_vary on;
        gzip_buffers 64 8k;
        gzip_disable "msie6";
    {% else %}
        gzip off;
        gzip_static off;
    {% endif %}

    open_file_cache max=65000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    proxy_http_version 1.1;
    proxy_read_timeout 200;
    proxy_buffers 256 8k;
    proxy_intercept_errors on;
    proxy_pass_request_headers on;
    proxy_set_header Host $http_host;
    proxy_set_header Accept-Encoding "";
    {% if not config.has_bunker or config.is_bunker %}
    proxy_set_header X-Real-IP $remote_addr;
    {% else %}
    set_real_ip_from {{ config.bunker_ip }};
    real_ip_header X-Real-IP;
    real_ip_recursive on;
    {% endif %}
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Request-Code $msec-$cookie_vb;
    proxy_redirect off;
    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;

    access_log off;
    log_format logstash_json '{ "@timestamp": "$time_iso8601", '
                             '"@type": "nginx", '
                             '"@fields": { '
                             '"user_code": "$cookie_vu", '
                             '"browser_code": "$cookie_vb", '
                             '"remote_addr": "$remote_addr", '
                             '"request": "$request", '
                             '"request_time": "$request_time", '
                             '"request_code": "$msec-$cookie_vb", '
                             '"request_method": "$request_method", '
                             '"status": "$status", '
                             '"body_bytes_sent": "$body_bytes_sent", '
                             '"http_referrer": "$http_referer", '
                             '"http_user_agent": "$http_user_agent", '
                             '"http_x_forwarded_for": "$http_x_forwarded_for" } }';

    {% for server_properties in config.servers.values() %}
        {% for upstream_name, upstream_servers in (server_properties.get('upstreams') or {}).items() %}
        upstream {{ upstream_name }} {
            {% for upstream_server in upstream_servers %}
            server {{ upstream_server.host }}:{{ upstream_server.port }};
            {% endfor %}
        }
        {% endfor %}
    {% endfor %}

    {% for server_name, server_properties in config.servers.items() %}

    {% if server_properties['ssl'] and config.HTTP_STANDARD_PORT not in server_properties['additional_listens'] %}
    server {
        server_name {{ server_name }};
        listen {{ config.HTTP_STANDARD_PORT }}{% if server_properties['default_server'] %} default_server reuseport{% endif %};
        {% if server_properties['use_certbot'] %}
        location ^~ /.well-known/ {
            allow all;
            default_type "text/plain";
            root /var/www/html;
        }
        {% endif %}
       location / {
            return 301 https://$host{% if server_properties['listen'] != config.HTTPS_STANDARD_PORT %}:{{ server_properties['listen'] }}{% endif %}$request_uri;
        }
    }
    {% endif %}

    server {
        server_name {{ server_name }};
        if ($request_method !~ ^(GET|HEAD|POST|PUT|PATCH|DELETE|OPTIONS)$ ) {
             return 444;
        }
        error_log {{ config.log_directory }}/{{ server_name }}-error.log;
        {% if not config.has_bunker or config.is_bunker %}
        access_log {{ config.log_directory }}/{{ server_name }}-access.log logstash_json;
        {% else %}
        access_log off;
        {% endif %}
        {% if server_properties['use_certbot'] %}
            ssl_certificate /etc/letsencrypt/live/{{ server_name }}/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/{{ server_name }}/privkey.pem;
            ssl_trusted_certificate /etc/letsencrypt/live/{{ server_name }}/chain.pem;
            ssl_stapling on;
            ssl_stapling_verify on;

            {% if config.HTTP_STANDARD_PORT in server_properties['additional_listens'] %}
                location ^~ /.well-known/ {
                    allow all;
                    default_type "text/plain";
                    root /var/www/html;
                }
            {% endif %}
        {% endif %}
        {% for key, value in server_properties.items() if key not in ('ssl', 'use_certbot', 'default_server') %}
            {% if 'locations' == key %}
                {% for location, location_properties in value.items() %}
                location {{ location }} {
                    {% for key, value in location_properties.items() %}
                        {% if '_' == key %}
                            {{ value }}
                        {% else %}
                            {{ key }} {{ value }};
                        {% endif %}
                    {% endfor %}
                }
                {% endfor %}
            {% elif 'listen' == key %}
                listen {{ value }}{% if server_properties['ssl'] %} ssl http2{% endif %}{% if server_properties['default_server'] %} default_server reuseport{% endif %};
            {% elif 'additional_listens' == key %}
                {% for listen in value %}
                    listen {{ listen }}{% if server_properties['default_server'] %} default_server reuseport{% endif %};
                {% endfor %}
            {% elif 'upstreams' == key %}
                {# skip this #}
            {% elif 'error_page_dir' == key %}
                {# skip #}
            {% elif 'error_page' == key %}
                {% if value %}
                    {% for error_number, error_page_name in value.items() %}
                        error_page {{ error_number }} /{{ error_page_name }};
                        location = /{{ error_page_name }} {
                            root {{ server_properties['error_page_dir'] }};
                            }
                    {% endfor %}
                {% endif %}
            {% elif '_' == key %}
                {{ value }}
            {% else %}
                {{ key }} {{ value }};
            {% endif %}
        {% endfor %}
    }
    {% endfor %}

    {% if config.base_domain_names %}
    server {
        server_name {{ '.' + config.base_domain_names|join(' .') }};
        listen {{ config.HTTP_STANDARD_PORT }};
        location ^~ /.well-known/ {
            allow all;
            default_type "text/plain";
            root /var/www/html;
        }
        location / {
            {% for server_name, server_properties in config.servers.items() if server_properties['default_server'] %}
            return 302 {{ 'https' if server_properties['ssl'] else 'http' }}://{{ server_name }}{% if server_properties['listen'] not in (config.HTTP_STANDARD_PORT, config.HTTPS_STANDARD_PORT) %}:{{ server_properties['listen'] }}{% endif %}$request_uri;
            {% else %}
            return 444;
            {% endfor %}
        }
    }
    {% endif %}
}

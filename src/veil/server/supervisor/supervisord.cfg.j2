; unix http server only for supervisorctl
[unix_http_server]
file=/tmp/supervisor-{{ config.inet_http_server.port }}.sock   ; (the path to the socket file)
;chmod=0700                 ; sockef file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

{% if 'inet_http_server' in config %}
[inet_http_server]
port={{ config.inet_http_server.host }}:{{ config.inet_http_server.port }}
{% if 'username' in config.inet_http_server %}
username={{ config.inet_http_server.username }}
{% endif %}
{% if 'password' in config.inet_http_server %}
password={{ config.inet_http_server.password }}
{% endif %}
{% endif %}

[supervisord]
logfile={{ config.logging.directory }}/supervisor.log
logfile_maxbytes={{ config.logging.get('max_size', '50MB') }}
logfile_backups={{ config.logging.get('backups_count', 10) }}
pidfile={{ config.pid_file }}
nodaemon=false
{% if 'elasticsearch' in config.programs %}
minfds=65536
{% endif %}

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history  ; use readline history if available

; The below sample program section shows all possible program subsection values,
; create one or more 'real' program: sections to be able to control them under
; supervisor.

{% for program_name, program in config.programs.items() %}
[program:{{ program_name }}]
command={{ program.execute_command }}
user={{ program.run_as }}
{% if 'run_in_directory' in program %}
directory={{ program.run_in_directory }}
{% endif %}
priority={{ program.get('priority', 999) }}
{% if 'environment_variables' in program %}
environment={{ program.environment_variables }}
{% endif %}
{% if 'process_name' in program %}
process_name={{ program.process_name }}
{% else %}
{% if 'process_count' in program %}
process_name=%(program_name)s-%(process_num)s
{% else %}
process_name=%(program_name)s
{% endif %}
{% endif %}
numprocs={{ program.get('process_count', 1) }}
startsecs={{ program.get('startsecs', 3) }}
startretries={{ program.get('startretries', 3) }}
stopwaitsecs={{ program.get('stopwaitsecs', 10) }}
stopsignal={{ program.get('stop_signal', 'TERM') }}
exitcodes={{ ','.join(program.get('expected_exit_codes', '02')) }}
redirect_stderr={{ 'true' if program.redirect_stderr else 'false' }}
{% if program.redirect_stderr %}
stdout_logfile={{ config.logging.directory }}/{{ program_name }}.log
{% else %}
stdout_logfile={{ config.logging.directory }}/{{ program_name }}-stdout.log
stderr_logfile={{ config.logging.directory }}/{{ program_name }}-stderr.log
{% endif %}
stdout_logfile_maxbytes={{ program.get('stdout_logfile_maxbytes', '50MB') }}
stdout_logfile_backups={{ program.get('stdout_logfile_backups', 10) }}
stderr_logfile_maxbytes={{ program.get('stderr_logfile_maxbytes', '50MB') }}
stderr_logfile_backups={{ program.get('stderr_logfile_backups', 10) }}
{% endfor %}

; The below sample eventlistener section shows all possible
; eventlistener subsection values, create one or more 'real'
; eventlistener: sections to be able to handle event notifications
; sent by supervisor.

;[eventlistener:theeventlistenername]
;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;events=EVENT                  ; event notif. types to subscribe to (req'd)
;buffer_size=10                ; event buffer queue size (default 10)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=-1                   ; the relative start priority (default -1)
;autostart=true                ; start at supervisord start (default: true)
;autorestart=unexpected        ; restart at unexpected quit (default: unexpected)
;startsecs=10                  ; number of secs prog must stay running (def. 1)
;startretries=3                ; max # of serial start failures (default 3)
;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups        ; # of stderr logfile backups (default 10)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A=1,B=2           ; process environment additions
;serverurl=AUTO                ; override serverurl computation (childutils)

; The below sample group section shows all possible group values,
; create one or more 'real' group: sections to create "heterogeneous"
; process groups.

{% for program_group_name, programs in config.program_groups.items() %}
[group:{{ program_group_name }}]
programs= {{ programs | join(',') }}
{% endfor %}

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

;[include]
;files = relative/directory/*.ini